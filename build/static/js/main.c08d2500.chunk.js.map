{"version":3,"sources":["components/Message.js","App.js","serviceWorker.js","index.js"],"names":["Message","state","isLiked","counter","handleClick","bind","this","setState","props","name","photo","title","text","date","Date","displayDate","getDate","getMonth","getFullYear","btnClassName","className","src","alt","onClick","React","Component","App","userData","axios","get","then","res","data","results","to","path","exact","map","picture","location","id","first","thumbnail","country","city","key","value","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iVAoFeA,G,wDA/Eb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,SAAS,EACTC,QAAS,GAEX,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBANP,E,0GAaC,IAAD,EACiBC,KAAKL,MAA1BC,EADI,EACJA,QAASC,EADL,EACKA,QACjBG,KAAKC,SAAS,CAAEL,SAAUA,EAASC,QAASA,EAAU,M,+BAG9C,IAAD,EAC6BG,KAAKE,MAAjCC,EADD,EACCA,KAAMC,EADP,EACOA,MAAOC,EADd,EACcA,MAAOC,EADrB,EACqBA,KACtBC,EAAO,IAAIC,KACXC,EAAW,UAAMF,EAAKG,UAAX,YAAwBH,EAAKI,WAAa,EAA1C,YAA+CJ,EAAKK,eAC7Df,EAAYG,KAAKL,MAAjBE,QACFgB,EAAY,gCAA6BhB,GAAW,EAAI,YAAc,IAE5E,OACE,yBAAKiB,UAAU,WACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,uBAAuBC,IAAMX,EAAQY,IAAI,WACxD,yBAAKF,UAAU,6BACb,uBAAGA,UAAU,wBAAyBX,GACtC,0BAAMW,UAAU,uBAAwBL,IAE1C,yBAAKK,UAAU,4BACb,0BAAMA,UAAU,0BAA2BjB,GAC3C,4BACEiB,UAAYD,EACZI,QAAUjB,KAAKF,gBAIrB,yBAAKgB,UAAU,gBACb,wBAAIA,UAAU,sBACVT,GAEJ,uBAAGS,UAAU,wBACTR,S,GA/CQY,IAAMC,YCsEbC,E,kDA5Db,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IAEDP,MAAQ,CACX0B,SAAU,IAJK,E,gEAQE,IAAD,OAClBC,IAAMC,IAZE,wCAaLC,MAAK,SAACC,GACL,EAAKxB,SAAS,CAAEoB,SAAUI,EAAIC,KAAKC,e,+BAI/B,IACAN,EAAarB,KAAKL,MAAlB0B,SACR,OACE,kBAAC,IAAD,KACE,yBAAKP,UAAU,cACb,wBAAIA,UAAU,mBACZ,4BACE,kBAAC,IAAD,CAAMc,GAAG,IAAId,UAAU,mBAAvB,SAEF,4BACE,kBAAC,IAAD,CAAMc,GAAG,SAASd,UAAU,mBAA5B,UAEF,4BACE,kBAAC,IAAD,CAAMc,GAAG,UAAUd,UAAU,mBAA7B,cAIN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOe,KAAK,IAAIC,OAAK,GACnB,yBAAKhB,UAAU,OACZO,EAASU,KAAI,YAAqC,IAAlC5B,EAAiC,EAAjCA,KAAM6B,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,GACxC,OACE,kBAAC,EAAD,CACE/B,KAAI,UAAMA,EAAKgC,MAAX,YAAoBhC,EAAKgC,OAC7B/B,MAAQ4B,EAAQI,UAChB/B,MAAQ4B,EAASI,QACjB/B,KAAO2B,EAASK,KAChBC,IAAML,EAAGM,aAMnB,kBAAC,IAAD,CAAOX,KAAK,UAAZ,yCAGA,kBAAC,IAAD,CAAOA,KAAK,WAAZ,oL,GApDQX,IAAMC,WCDJsB,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c08d2500.chunk.js","sourcesContent":["import React from 'react';\nimport './Message.css';\n// import { render } from '@testing-library/react';\n\nclass Message extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isLiked: false,\n      counter: 0\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentWillUnmount() {\n\n  }\n\n  handleClick() {\n    const { isLiked, counter } = this.state;\n    this.setState({ isLiked: !isLiked, counter: counter + 1 });\n  }\n\n  render() {\n    const { name, photo, title, text} = this.props;\n    const date = new Date();\n    const displayDate = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n    const { counter } = this.state;\n    const btnClassName = `message-header-button ${ counter >= 1 ? 'is-active' : '' }`\n\n    return (\n      <div className=\"message\">\n        <div className=\"message-header\">\n          <img className=\"message-header-image\" src={ photo } alt=\"avatar\" />\n          <div className=\"message-header-text_block\">\n            <p className=\"message-header-title\">{ name }</p>\n            <span className=\"message-header-date\">{ displayDate }</span>\n          </div>\n          <div className=\"message-header-container\">\n            <span className=\"message-header-counter\">{ counter }</span>\n            <button \n              className={ btnClassName } \n              onClick={ this.handleClick }\n            />\n          </div>\n        </div>\n        <div className=\"message-body\">\n          <h2 className=\"message-body-title\">\n            { title }\n          </h2>\n          <p className=\"message-body-content\">\n            { text }\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\n// function Message(props) {\n//   const { name, logo, title, text} = props;\n//   const date = new Date();\n//   const displayDate = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n//   return (\n//     <div className=\"message\">\n//       <div className=\"message-header\">\n//         <img className=\"message-header-image\" src={ logo } alt=\"avatar\" />\n//         <div className=\"message-header-text_block\">\n//           <p className=\"message-header-title\">{ name }</p>\n//           <span className=\"message-header-date\">{ displayDate }</span>\n//         </div>\n//       </div>\n//       <div className=\"message-body\">\n//         <h2 className=\"message-body-title\">\n//           { title }\n//         </h2>\n//         <p className=\"message-body-content\">\n//           { text }\n//         </p>\n//       </div>\n//     </div>\n//   );\n// }\n\nexport default Message;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport axios from 'axios';\nimport './App.css';\nimport Message from './components/Message.js';\n\nconst API = 'https://randomuser.me/api?results=30';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      userData: [],\n    }\n  }\n\n  componentDidMount() {\n    axios.get(API)\n      .then((res) => {\n        this.setState({ userData: res.data.results });\n      });\n  }\n\n  render() {\n    const { userData } = this.state;\n    return (\n      <Router>\n        <nav className=\"navigation\">\n          <ul className=\"navigation-list\">\n            <li>\n              <Link to=\"/\" className=\"navigation-link\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/hello\" className=\"navigation-link\">Hello</Link>\n            </li>\n            <li>\n              <Link to=\"/signin\" className=\"navigation-link\">Sign in</Link>\n            </li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route path=\"/\" exact>\n            <div className=\"App\">\n              {userData.map(({ name, picture, location, id}) => {\n                return (\n                  <Message \n                    name={ `${name.first} ${name.first}` }\n                    photo={ picture.thumbnail }\n                    title={ location.country }\n                    text={ location.city }\n                    key={ id.value }\n                  />\n                );\n              })}\n            </div>\n          </Route>\n          <Route path=\"/hello\">\n            Привет!\n          </Route>\n          <Route path=\"/signin\">\n            Здесь можно зарегистрироваться\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}